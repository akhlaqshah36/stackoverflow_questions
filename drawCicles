package com.akhlaq.checkbtn;

import android.app.Activity;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.View;

import java.lang.reflect.Method;

public class UsingSlope extends View {

    Paint p;
    int height;
    int width;
    Activity windowActivity;
    float slope;
    float y2_formula;

    public UsingSlope(Context context, Activity attachActivity) {
        super(context);


        DisplayMetrics displayMetrics = new DisplayMetrics();
        attachActivity.getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);

        height = displayMetrics.heightPixels;


        // hideSystemUI();

        // getSupportActionBar().hide();


        if (checkDeviceHasNavigationBar(getContext())) {
            width = displayMetrics.widthPixels + getNavigationBarHeight(getContext());

        } else {

            width = displayMetrics.widthPixels;
        }

        p = new Paint();
        p.setStyle(Paint.Style.STROKE);
        p.setColor(Color.RED);
        p.setStrokeWidth(8);

        /*height = get_height;
        width = get_width;*/
        windowActivity = attachActivity;
        slope = findSlope(0,width,0,height);
        Log.d("Find Height ", "Result "+height);
        y2_formula = find_y2(slope,width);
        Log.d("Y2", " Result : "+y2_formula);


    }




    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);




        // DashPathEffect dashPath = new DashPathEffect(new float[]{5,5}, (float)1.0);


        //formula_cx =


        int  radius = pxToDp(300); //circle radius
        Log.d("Radius Dpi"," radius value"+radius);
        int x = (int) (width/2-(radius)), y = height/2+radius;  //x is left and  y is top

        int y_increment = radius * 2, x_increment = x + (radius/10);  // increment to x and y for loop
     //   int x2 = width - radius*5, y2 = y; // X and Y for second diagonal line
        int width_limit = width - (radius);
        int height_limit = height - (radius);
        double radius_inrement = 3;


        //from center point to bottom right
        int x1 = x + radius;
        int y1 = y + (radius*2);

        //from center to top left
        int  x2 = x - radius;
        int y2 = y  -( radius*2);

        //from center point to top right
        int x3 = x+ radius;
        int y3 = y- (radius*2);

        //from center to bottom left

        int x4 = x-radius;
        int y4 = y + (radius*2);

      /*  for (int i = 0; i < 10; i ++) {
            canvas.drawCircle(x, y, 100, p);
            canvas.drawPoint(x,y,p);

            x = x +135;
            y = y +200;
            Log.d("coords","X "+x+ " Y  "+y);

            height = height - y;
            width = width - x;

        }*/

        //int new_x = (int) ((slope/2)+(width/2));

        for(int i=0; i <= 9; i++) {



            if(width_limit >= radius*2 && height_limit >= radius*2) {

                canvas.drawCircle(x, y, radius, p);// drawing on center point
                canvas.drawCircle(x1, y1, radius, p);// drawing on center point and to bottom right
                canvas.drawCircle(x2, y2, radius, p);// drawing from center point to top left
                canvas.drawCircle(x3, y3, radius, p);// drawing from center point to top right
                canvas.drawCircle(x4, y4, radius, p);// drawing from center point to bottom left
                // canvas.drawCircle((float) (x + (radius * 1.25)), y + (radius * 2), radius, p);

                width_limit = width_limit - radius*2;
                height_limit = height_limit - radius*4;
                x1 = (int) (x1 + (radius+radius_inrement));
                y1 = y1 + (radius * 2);

                x2 = (int) (x2 - (radius+radius_inrement));
                y2 = y2 - (radius * 2);

                x3 = (int) (x3 + (radius + radius_inrement));
                y3 = y3 - (radius * 2);

                x4 = (int) (x4 - (radius + radius_inrement));
                y4 = y4 + (radius * 2);

            }else{

                break;
            }

        }
/*

            for(int i = 0;i <= width  ; i++) {

                if (limit > radius * 4 && heightLimit > radius * 2) {

                    canvas.drawCircle(x, y, radius, p);
                    canvas.drawCircle(x2, y2, radius, p);

                    Log.d("finding limit", "LIMIT  " + limit);
                    // canvas.drawPoint(x,y,p);
                    x = x + x_increment;
                    x2 = (int) (x2 - x_increment);
                    Log.d("finding x2", "X2 " + x2);
                    y = y + y_increment;
                    y2 = y2 + y_increment;
                    i = x;

                    limit = limit - x_increment;
                    heightLimit = heightLimit - x_increment;

                    Log.d("coords", "X " + x + " Y  " + y + " i " + i);

                }

            }

*/

        //  invalidate();

        //Toast.makeText(getContext(), "Drawing Demo", Toast.LENGTH_SHORT).show();
    }

    float findSlope(float x1, float x2,float y1, float y2){


        return (y2-y1)/(x2-x1);
    }


    float find_y2(float slope, int width){


        return (slope*width)/2;

    }

    @Override
    public void onWindowFocusChanged(boolean hasFocus) {
        super.onWindowFocusChanged(hasFocus);
        View decorView = windowActivity.getWindow().getDecorView();
        decorView.setSystemUiVisibility(
                View.SYSTEM_UI_FLAG_IMMERSIVE
                        // Set the content to appear under the system bars so that the
                        // content doesn't resize when the system bars hide and show.
                        | View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                        | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                        | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                        // Hide the nav bar and status bar
                        | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                        | View.SYSTEM_UI_FLAG_FULLSCREEN);
    }





    private int getNavigationBarHeight(Context context) {
        Resources resources = context.getResources();
        int resourceId = resources.getIdentifier("navigation_bar_height", "dimen", "android");
        int height = resources.getDimensionPixelSize(resourceId);
        Log.v("dbw", "Navi height:" + height);
        return height;
    }

    public static boolean checkDeviceHasNavigationBar(Context context) {
        boolean hasNavigationBar = false;
        Resources rs = context.getResources();
        int id = rs.getIdentifier("config_showNavigationBar", "bool", "android");
        if (id > 0) {
            hasNavigationBar = rs.getBoolean(id);
        }
        try {
            Class systemPropertiesClass = Class.forName("android.os.SystemProperties");
            Method m = systemPropertiesClass.getMethod("get", String.class);
            String navBarOverride = (String) m.invoke(systemPropertiesClass, "qemu.hw.mainkeys");
            if ("1".equals(navBarOverride)) {
                hasNavigationBar = false;
            } else if ("0".equals(navBarOverride)) {
                hasNavigationBar = true;
            }
        } catch (Exception e) {

        }
        return hasNavigationBar;
    }

    int pxToDp(int px){

        DisplayMetrics displayMetrics = getContext().getResources().getDisplayMetrics();
        return px/(displayMetrics.densityDpi/160);

    }

}
